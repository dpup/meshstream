/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StreamImport } from './routes/stream'
import { Route as RootImport } from './routes/root'
import { Route as MapImport } from './routes/map'
import { Route as InfoImport } from './routes/info'
import { Route as HomeImport } from './routes/home'
import { Route as DemoImport } from './routes/demo'
import { Route as ChannelsImport } from './routes/channels'
import { Route as IndexImport } from './routes/index'
import { Route as NodeNodeIdImport } from './routes/node.$nodeId'
import { Route as ChannelChannelIdImport } from './routes/channel.$channelId'

// Create/Update Routes

const StreamRoute = StreamImport.update({
  id: '/stream',
  path: '/stream',
  getParentRoute: () => rootRoute,
} as any)

const RootRoute = RootImport.update({
  id: '/root',
  path: '/root',
  getParentRoute: () => rootRoute,
} as any)

const MapRoute = MapImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => rootRoute,
} as any)

const InfoRoute = InfoImport.update({
  id: '/info',
  path: '/info',
  getParentRoute: () => rootRoute,
} as any)

const HomeRoute = HomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const DemoRoute = DemoImport.update({
  id: '/demo',
  path: '/demo',
  getParentRoute: () => rootRoute,
} as any)

const ChannelsRoute = ChannelsImport.update({
  id: '/channels',
  path: '/channels',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const NodeNodeIdRoute = NodeNodeIdImport.update({
  id: '/node/$nodeId',
  path: '/node/$nodeId',
  getParentRoute: () => rootRoute,
} as any)

const ChannelChannelIdRoute = ChannelChannelIdImport.update({
  id: '/channel/$channelId',
  path: '/channel/$channelId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/channels': {
      id: '/channels'
      path: '/channels'
      fullPath: '/channels'
      preLoaderRoute: typeof ChannelsImport
      parentRoute: typeof rootRoute
    }
    '/demo': {
      id: '/demo'
      path: '/demo'
      fullPath: '/demo'
      preLoaderRoute: typeof DemoImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/info': {
      id: '/info'
      path: '/info'
      fullPath: '/info'
      preLoaderRoute: typeof InfoImport
      parentRoute: typeof rootRoute
    }
    '/map': {
      id: '/map'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof MapImport
      parentRoute: typeof rootRoute
    }
    '/root': {
      id: '/root'
      path: '/root'
      fullPath: '/root'
      preLoaderRoute: typeof RootImport
      parentRoute: typeof rootRoute
    }
    '/stream': {
      id: '/stream'
      path: '/stream'
      fullPath: '/stream'
      preLoaderRoute: typeof StreamImport
      parentRoute: typeof rootRoute
    }
    '/channel/$channelId': {
      id: '/channel/$channelId'
      path: '/channel/$channelId'
      fullPath: '/channel/$channelId'
      preLoaderRoute: typeof ChannelChannelIdImport
      parentRoute: typeof rootRoute
    }
    '/node/$nodeId': {
      id: '/node/$nodeId'
      path: '/node/$nodeId'
      fullPath: '/node/$nodeId'
      preLoaderRoute: typeof NodeNodeIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/channels': typeof ChannelsRoute
  '/demo': typeof DemoRoute
  '/home': typeof HomeRoute
  '/info': typeof InfoRoute
  '/map': typeof MapRoute
  '/root': typeof RootRoute
  '/stream': typeof StreamRoute
  '/channel/$channelId': typeof ChannelChannelIdRoute
  '/node/$nodeId': typeof NodeNodeIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/channels': typeof ChannelsRoute
  '/demo': typeof DemoRoute
  '/home': typeof HomeRoute
  '/info': typeof InfoRoute
  '/map': typeof MapRoute
  '/root': typeof RootRoute
  '/stream': typeof StreamRoute
  '/channel/$channelId': typeof ChannelChannelIdRoute
  '/node/$nodeId': typeof NodeNodeIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/channels': typeof ChannelsRoute
  '/demo': typeof DemoRoute
  '/home': typeof HomeRoute
  '/info': typeof InfoRoute
  '/map': typeof MapRoute
  '/root': typeof RootRoute
  '/stream': typeof StreamRoute
  '/channel/$channelId': typeof ChannelChannelIdRoute
  '/node/$nodeId': typeof NodeNodeIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/channels'
    | '/demo'
    | '/home'
    | '/info'
    | '/map'
    | '/root'
    | '/stream'
    | '/channel/$channelId'
    | '/node/$nodeId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/channels'
    | '/demo'
    | '/home'
    | '/info'
    | '/map'
    | '/root'
    | '/stream'
    | '/channel/$channelId'
    | '/node/$nodeId'
  id:
    | '__root__'
    | '/'
    | '/channels'
    | '/demo'
    | '/home'
    | '/info'
    | '/map'
    | '/root'
    | '/stream'
    | '/channel/$channelId'
    | '/node/$nodeId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChannelsRoute: typeof ChannelsRoute
  DemoRoute: typeof DemoRoute
  HomeRoute: typeof HomeRoute
  InfoRoute: typeof InfoRoute
  MapRoute: typeof MapRoute
  RootRoute: typeof RootRoute
  StreamRoute: typeof StreamRoute
  ChannelChannelIdRoute: typeof ChannelChannelIdRoute
  NodeNodeIdRoute: typeof NodeNodeIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChannelsRoute: ChannelsRoute,
  DemoRoute: DemoRoute,
  HomeRoute: HomeRoute,
  InfoRoute: InfoRoute,
  MapRoute: MapRoute,
  RootRoute: RootRoute,
  StreamRoute: StreamRoute,
  ChannelChannelIdRoute: ChannelChannelIdRoute,
  NodeNodeIdRoute: NodeNodeIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/channels",
        "/demo",
        "/home",
        "/info",
        "/map",
        "/root",
        "/stream",
        "/channel/$channelId",
        "/node/$nodeId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/channels": {
      "filePath": "channels.tsx"
    },
    "/demo": {
      "filePath": "demo.tsx"
    },
    "/home": {
      "filePath": "home.tsx"
    },
    "/info": {
      "filePath": "info.tsx"
    },
    "/map": {
      "filePath": "map.tsx"
    },
    "/root": {
      "filePath": "root.tsx"
    },
    "/stream": {
      "filePath": "stream.tsx"
    },
    "/channel/$channelId": {
      "filePath": "channel.$channelId.tsx"
    },
    "/node/$nodeId": {
      "filePath": "node.$nodeId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
